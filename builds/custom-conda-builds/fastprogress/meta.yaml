{% set name = "fastprogress" %}
{% set version = "0.1.5" %}
{% set file_ext = "tar.gz" %}
{% set hash_type = "sha256" %}
{% set hash_value = "a90644fb5a2a73f245d58e7e9bb60f252e2a578f2389cbc446661f26e920971a" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.{{ file_ext }}'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  noarch: python
  script: python setup.py install --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - setuptools
  run:
    - python

test:
  imports:
    - fastprogress

about:
  home: https://github.com/fastai/fast_progress
  license: Apache License 2.0
  license_family: APACHE
  license_file: ''
  summary: A nested progress with plotting options for fastai
  description: "# fast_progress\n\nA fast and simple progress bar for Jupyter Notebook and console. Created by Sylvain Gugger for fast.ai.\n\nCopyright 2017 onwards, fast.ai. Licensed under the Apache License,\
    \ Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. A copy of the License is provided in the LICENSE file in this repository.\n\n<img src=\"cifar_train.gif\"\
    \ width=\"600\">\n\n## Install\n\nTo install simply use\n```\npip install fast_progress\n```\nNote that this requires python 3.6 or later.\n\n## Usage\n\nHere is a simple example. Each bar takes a generator\
    \ as a main argument, and we can specify the second bar is nested with the first by adding the argument parent=mb. We can then\n- add a comment in the first bar by changing the value of mb.first_bar.comment\n\
      - add a comment in the first bar by changing the value of mb.child.comment\n- write a line between the two bars with mb.write('message')\n\n``` python\nfrom fast_progress import master_bar, progress_bar\n\
    from time import sleep\nmb = master_bar(range(10))\nfor i in mb:\n    for j in progress_bar(range(100), parent=mb):\n        sleep(0.01)\n        mb.child.comment = f'second bar stat'\n    mb.first_bar.comment\
    \ = f'first bar stat'\n    mb.write(f'Finished loop {i}.')\n    #mb.update_graph(graphs, x_bounds, y_bounds)\n```\n\n<img src=\"pb_basic.gif\" width=\"600\">\n\nTo add a graph that get plots as the\
    \ training goes, just use the command mb.update_graphs. It will create the figure on its first use. Arguments are:\n- graphs: a list of graphs to be plotted (each of the form [x,y])\n- x_bounds: the\
    \ min and max values of the x axis (if None, it will those given by the graphs)\n- y_bounds: the min and max values of the y axis (if None, it will those given by the graphs)\n\nNote that it's best\
    \ to specify x_bounds and _bounds otherwise the box will change as the loop progresses.\n\nAdditionally, we can give the label of each graph via the command mb.names (should have as many elements as\
    \ the graphs argument).\n\n``` python\nimport numpy as np\nmb = master_bar(range(10))\nmb.names = ['cos', 'sin']\nfor i in mb:\n    for j in progress_bar(range(100), parent=mb):\n        if j%10 ==\
    \ 0:\n            k = 100 * i + j\n            x = np.arange(0, 2*k*np.pi/1000, 0.01)\n            y1, y2 = np.cos(x), np.sin(x)\n            graphs = [[x,y1], [x,y2]]\n            x_bounds = [0, 2*np.pi]\n\
    \            y_bounds = [-1,1]\n            mb.update_graph(graphs, x_bounds, y_bounds)\n            mb.child.comment = f'second bar stat'\n    mb.first_bar.comment = f'first bar stat'\n    mb.write(f'Finished\
    \ loop {i}.')\n```\n\n<img src=\"pb_cos.gif\" width=\"600\">\n\nHere is the rendering in console:\n\n<img src=\"pb_console.gif\" width=\"800\">\n\nIf the script using this is executed with a redirect\
    \ to a file, only the results of the .write method will be printed in that file.\n\n\n"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
